before_all do |lane, options|
  # Kiểm tra các biến môi trường bắt buộc
  ensure_env_vars(
    env_vars: ['FIREBASE_CLI_TOKEN']
  )
end

desc "Submit a new Beta Build to Firebase App Distribution"
lane :beta do |options|
  # Validate parameters
  flavor = options[:flavor] || "dev"
  UI.user_error!("Invalid flavor. Must be one of: dev, stag, prod") unless ["dev", "stag", "prod"].include?(flavor)
  
  # Load environment variables
  firebase_cli_token = ENV["FIREBASE_CLI_TOKEN"]
  release_notes = ENV["RELEASE_NOTES"] || "New build"
  
  # Testers configuration
  tester_emails = ENV["TESTER_EMAILS"] || "tuanvuanbai@gmail.com"
  tester_groups = ENV["TESTER_GROUPS"] || "internal-testers"
  
  # Firebase App ID mapping
  firebase_app_id = {
    "dev" => "1:236116000088:android:978c211f47a4ce1042392d",
    "stag" => "1:236116000088:android:0ef77bea3ffacf9742392d",
    "prod" => "1:236116000088:android:3ad11574c769376f42392d"
  }[flavor] or UI.user_error!("Unknown flavor: #{flavor}")

  # APK path - sử dụng đường dẫn tuyệt đối
  apk_path = "#{Dir.pwd}/../../build/app/outputs/flutter-apk/app-#{flavor}-release.apk"
  
  begin
    # Print environment info
    UI.message("Environment Info:")
    UI.message("- Flavor: #{flavor}")
    UI.message("- Firebase App ID: #{firebase_app_id}")
    UI.message("- Package Name: com.retrotrix.tetrofit")
    UI.message("- Tester Emails: #{tester_emails}")
    UI.message("- Tester Groups: #{tester_groups}")
    UI.message("- Release Notes: #{release_notes}")
    UI.message("- Expected APK Path: #{apk_path}")

    # Clean build artifacts
    UI.message("\nCleaning build artifacts...")
    gradle(task: "clean")
    sh("flutter clean")
    
    # Build APK with Flutter
    UI.message("\nBuilding #{flavor} APK...")
    sh("flutter build apk --flavor #{flavor} -t lib/main_#{flavor}.dart --release --verbose")
    
    # Verify APK exists
    unless File.exist?(apk_path)
      # Try to find the APK
      UI.message("\nSearching for APK file...")
      sh("find #{Dir.pwd}/../../build -name '*.apk' -type f")
      UI.user_error!("APK file not found at expected path: #{apk_path}")
    end

    UI.message("\nAPK file found at: #{apk_path}")
    UI.message("APK file size: #{File.size(apk_path)} bytes")

    # Verify Firebase CLI installation
    UI.message("\nVerifying Firebase CLI...")
    firebase_version = sh("firebase --version")
    UI.message("Using Firebase CLI version: #{firebase_version}")

    # Verify Firebase login status
    UI.message("\nChecking Firebase login status...")
    sh("firebase login:list")

    # Verify app configuration
    UI.message("\nVerifying app configuration...")
    sh("firebase apps:sdkconfig ANDROID #{firebase_app_id}")
    
    # Upload to Firebase App Distribution
    UI.message("\nUploading to Firebase App Distribution...")
    UI.message("Uploading with configuration:")
    UI.message("- App ID: #{firebase_app_id}")
    UI.message("- Tester Emails: #{tester_emails}")
    UI.message("- Tester Groups: #{tester_groups}")
    
    firebase_app_distribution(
      app: firebase_app_id,
      firebase_cli_token: firebase_cli_token,
      apk_path: apk_path,
      groups: tester_groups,
      testers: tester_emails,
      release_notes: "[#{flavor.upcase}] #{release_notes} - #{Time.now.strftime('%Y-%m-%d %H:%M')}",
      debug: true
    )
    
    # Success notification
    UI.success("\nSuccessfully distributed #{flavor} build to Firebase App Distribution!")
    UI.message("\nDistribution Details:")
    UI.message("- Build has been uploaded to Firebase App Distribution")
    UI.message("- Notification emails will be sent to: #{tester_emails}")
    UI.message("- Members of these groups will be notified: #{tester_groups}")
    UI.message("\nTroubleshooting Tips:")
    UI.message("1. Check your spam/junk folder")
    UI.message("2. Verify email #{tester_emails} is added to Firebase Console")
    UI.message("3. Try accessing Firebase Console directly:")
    UI.message("   https://console.firebase.google.com/project/retrotrix-e7c34/appdistribution/app/android:com.example.aa_teris")
    
  rescue => ex
    UI.error("\nFailed to distribute app: #{ex.message}")
    UI.error("Full error: #{ex.backtrace.join("\n")}")
    raise ex
  end
end

desc "Build APK without distribution"
lane :build do |options|
  flavor = options[:flavor] || "dev"
  UI.user_error!("Invalid flavor. Must be one of: dev, stag, prod") unless ["dev", "stag", "prod"].include?(flavor)
  
  gradle(task: "clean")
  sh("flutter clean")
  sh("flutter build apk --flavor #{flavor} -t lib/main_#{flavor}.dart --release")
end
